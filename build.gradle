plugins {
    id 'java'
    id("com.github.spacialcircumstances.gradle-cucumber-reporting") version "0.1.25"
    id 'jacoco'
    id("org.sonarqube") version "4.4.0.3356"
    id 'maven-publish'
    id 'de.zebrajaeger.sendMail' version("0.1.1")

}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
}

test {
    useJUnitPlatform()
    testFramework {
        useJUnit()
    }
}
//test.finalizedBy "generateCucumberReports"
//test.finalizedBy "jacocoTestReport"
//test.finalizedBy "javadoc"
//test.finalizedBy "sonar"
//test.finalizedBy "publish"
//publish.dependsOn "generateCucumberReports"
//publish.dependsOn "jacocoTestReport"
//publish.dependsOn "javadoc"
//publish.dependsOn "sonar"
//publish.finalizedBy "notifySlack"
//publish.finalizedBy "sendMail"


cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('reports/example-report.json')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonar {
    properties {
        property("sonar.projectKey", "myProjectKey")
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.skipCompile", "true")
    }
}

javadoc {
    destinationDir = file("${buildDir}/docs/javadoc")
}

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/gmdV8SsjPBhvfGourzZp/'
            credentials {
                username 'myMavenRepo'
                password 'mymavenrepo'
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}


import groovy.json.JsonOutput

task notifySlack {
    doLast {
        def webhookUrl = "https://hooks.slack.com/services/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" // Remplacez par votre URL
        def message = [
                text: "ðŸš€ DÃ©ploiement terminÃ© avec succÃ¨s !"
        ]
        def jsonMessage = JsonOutput.toJson(message)

        def connection = new URL(webhookUrl).openConnection()
        connection.setRequestMethod("POST")
        connection.setDoOutput(true)
        connection.setRequestProperty("Content-Type", "application/json")
        connection.getOutputStream().write(jsonMessage.bytes)

        def responseCode = connection.getResponseCode()
        if (responseCode == 200) {
            println "Notification Slack envoyÃ©e avec succÃ¨s."
        } else {
            println "Erreur lors de l'envoi de la notification Slack : ${responseCode}"
        }
    }
}


sendMail {
    smtpServer {
        host "smtp.gmail.com"
        port 587
        user "ka_selidja@esi.dz"
        password "vplm ebtj kbtz isqd"
    }
    mail {
        from "ka_selidja@esi.dz"
        to "raouf.selidja@gmail.com"

        body "ðŸš€ DÃ©ploiement terminÃ© avec succÃ¨s !"
    }
}